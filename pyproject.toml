[project]
name = "icss"
description = "Introduction to Computational Social Science"
authors = [{ name = "Mikolaj Biesaga",  email="m.biesaga@uw.edu.pl"}]

readme = "README.md"
requires-python = ">=3.11"

[tool.mypy]
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
ignore_missing_imports = true
plugins = "numpy.typing.mypy_plugin"

[ruff]
target-version = "py310"
select = [
    "E",     # pycodestyle (errors)
    "W",     # pycodestyle (warnings)
    "F",     # pyflakes
    "I",     # isort
    "UP",    # pyupgrade
    "Q",     # flake8-quotes
    "C90",   # mccabe
    "B",     # flake8-bugbear
    "S",     # flake8-bandit
    "G",     # flake8-logging-format
    "EM",    # flake8-errmsg
    "FA",    # flake8-future-annotations
    "SIM",   # flake8-simplify
    "PIE",   # flake8-pie
    "PT",    # flake8-pytest-style
    "TID",   # flake8-tidy-imports
    "ICN",   # flake8-import-conventions
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "TD",    # flake8-todos
    "FIX",   # flake8-fixme
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "SLOT",  # flake8-slots
    "RET",   # flake8-return
    "RSE",   # flake8-raise
    "PYI",   # flake8-pyi
    "PERF",  # perflint
    "NPY"    # numpy,
]
ignore = [
    "SIM105",
    "RET504"
]
[ruff.per-file-ignores]
"__init__.py" = ["F401"]
"test_*.py" = ["S101"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--verbose",
    "--tb=no",
    "--capture=no",
    "--pdbcls=IPython.terminal.debugger:Pdb",
    "--doctest-modules",
##    "--import-mode=importlib"
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
branch = true
command_line = "-m pytest"

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

ignore_errors = true

[tool.coverage.html]
directory = "coverage_html_report"
